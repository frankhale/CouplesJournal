@namespace CouplesJournal.Components

@using Microsoft.AspNetCore.Http
@using CouplesJournal.Data
@using CouplesJournal.Data.API
@using CouplesJournal.Data.Entities

@inject CouplesJournalDbContext DbContext
@inject IHttpContextAccessor HttpAccessor
@inject NavigationManager NavigationManager

@if(!string.IsNullOrEmpty(ErrorMessage))
{
    <EditForm Model="@Entry" OnValidSubmit="@Submit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="container-fluid">
            <div class="row">
                <div class="w-100">
                    <input class="form-control" type="text" placeholder="Enter Title Here..." @bind=@Entry.Title />
                </div>

                <div class="w-100 mh-100" style="padding-top:15px;">
                    <textarea class="form-control" placeholder="Enter Journal Here..." style="height: 550px;" @bind=@Entry.Body></textarea>
                </div>

                <div class="w-100 mh-100" style="padding-top:15px; text-align:right;display:inline;">
                    <div class="dropdown" style="display:inline;">
                        <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownJournalStatusButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            @Entry.Status.Value
                        </button>
                        <div class="dropdown-menu" aria-labelledby="dropdownJournalStatusButton">
                            @foreach (var status in Statuses)
                            {
                                <button class="dropdown-item" type="button" @onclick="eventArgs => { OnMenuItemSelected(status); }">@status.Value</button>
                            }
                        </div>
                    </div>

                    <button type="submit" class="btn btn-primary" style="display:inline;">Edit Journal</button>
                </div>
            </div>
        </div>
    </EditForm>
}
else
{
    <span>@ErrorMessage</span>
}

@code
{
    [Parameter]
    public Guid EntryId { get; set; }

    private JournalEntry Entry { get; set; }
    private List<JournalStatus> Statuses { get; set; }
    private string ErrorMessage { get; set; } = "Entry Id cannot be an empty Guid";

    protected override async Task OnInitializedAsync()
    {
        var api = new CouplesJournalDataApi(DbContext, HttpAccessor);
        Statuses = (await api.GetJournalStatusesAsync()).ToList();

        if (EntryId != Guid.Empty)
        {
            Entry = await api.GetJournalEntryAsync(EntryId);

            if (Entry == null)
            {
                ErrorMessage = "The journal entry does not exist!";
            }
        }
    }

    private async Task Submit()
    {
        var api = new CouplesJournalDataApi(DbContext, HttpAccessor);
        await api.EditJournalEntryAsync(EntryId, Entry);

        NavigationManager.NavigateTo($"/ViewJournal?journalId={EntryId}");
    }

    private void OnMenuItemSelected(JournalStatus status)
    {
        Entry.Status = status;
    }
}