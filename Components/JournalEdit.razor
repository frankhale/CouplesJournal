@namespace CouplesJournal.Components

@using CouplesJournal.Data
@using CouplesJournal.Data.API
@using CouplesJournal.Data.Entities
@using CouplesJournal.Mail
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Identity

@inject CouplesJournalDbContext DbContext
@inject IHttpContextAccessor HttpAccessor
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IMailService MailService
@inject UserManager<IdentityUser> UserManager

@if (!string.IsNullOrEmpty(ErrorMessage))
{
<EditForm Model=@Journal OnValidSubmit="@Submit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="container-fluid">
        <div class="row">
            <div class="w-100">
                <input class="form-control" type="text" placeholder="Enter Title Here..." @bind=@Journal.Title />
            </div>

            <div class="w-100" style="padding-top:15px;">
                <textarea class="form-control" placeholder="Enter Journal Here..." style="height: 550px;"
                @bind=@Journal.Body>
                </textarea>
            </div>
        </div>

        <div class="row" style="padding-top:15px;">
            <div class="col">
                <button class="btn btn-danger" @onclick=@OnDeleteButtonClicked @onclick:preventDefault>Delete</button>
            </div>
            <div class="col" style="text-align:right;display:inline;">
                <div style="display:inline;">
                    <div class="dropdown" style="display:inline;">
                        <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownJournalStatusButton"
                        data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            @Journal.Status.Value
                        </button>
                        <div class="dropdown-menu" aria-labelledby="dropdownJournalStatusButton">
                            @foreach (var status in Statuses)
                                {
                            <button @key=status class="dropdown-item" type="button"
                            @onclick="eventArgs => { OnMenuItemSelected(status); }">
                                @status.Value
                            </button>
                                            }
                        </div>
                    </div>
                    <button type="submit" class="btn btn-primary" style="display:inline;">Submit</button>
                </div>
            </div>
        </div>
    </div>
</EditForm>
}
else
{
<span>@ErrorMessage</span>
}

@code
{
    [Parameter]
    public string JournalId { get; set; }
    private Guid JournalIdGuid { get; set; }
    private JournalEntry Journal { get; set; }
    private List<JournalStatus> Statuses { get; set; }
    private string ErrorMessage { get; set; } = "Entry Id cannot be an empty Guid";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            JournalIdGuid = Guid.Parse(JournalId);

            var api = new CouplesJournalDataApi(DbContext, HttpAccessor);

            Statuses = (await api.GetJournalStatusesAsync()).ToList();
            Journal = await api.GetJournalEntryWithRepliesAsync(JournalIdGuid);

            if (Journal == null)
            {
                ErrorMessage = "The journal entry does not exist!";
            }
        }
        catch (FormatException fe)
        {
            ErrorMessage = fe.Message;
        }
        catch (ArgumentException ae)
        {
            ErrorMessage = ae.Message;
        }
    }
    private async Task Submit()
    {
        var api = new CouplesJournalDataApi(DbContext, HttpAccessor);
        await api.EditJournalEntryAsync(JournalIdGuid, Journal);

        foreach (var user in UserManager.Users.ToList())
        {
            if (user.UserName != HttpAccessor.HttpContext.User.Identity.Name)
            {
                // https://localhost:5001/ViewJournal/2686a141-733c-42e3-b9d9-9e6a48b9c47f
                var journalLink = $"{HttpAccessor.HttpContext.Request.Scheme}://{HttpAccessor.HttpContext.Request.Host}/ViewJournal/{Journal.Id}";

                await MailService.SendEmailAsync(new Mail.MailRequest
                {
                    To = user.Email,
                    Subject = $"{user.UserName} edited a journal entry",
                    Body = $"Hello,<br><br>{Journal.UserName} edited the journal entry titled '{Journal.Title}'.<br><br>You can view it here: {journalLink}"
                });
            }
        }

        NavigationManager.NavigateTo($"/ViewJournal/{JournalId}");
    }

    private void OnMenuItemSelected(JournalStatus status)
    {
        Journal.Status = status;
    }

    private async Task OnDeleteButtonClicked()
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            var api = new CouplesJournalDataApi(DbContext, HttpAccessor);
            await api.DeleteJournalEntryAsync(JournalIdGuid);
            NavigationManager.NavigateTo("/", true);
        }
    }
}