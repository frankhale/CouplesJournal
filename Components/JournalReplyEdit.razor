@namespace CouplesJournal.Components

@using CouplesJournal.Data
@using CouplesJournal.Data.API
@using CouplesJournal.Data.Entities
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

@inject CouplesJournalDbContext DbContext
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (!string.IsNullOrEmpty(ErrorMessage))
{
<EditForm Model="@Reply" OnValidSubmit="@Submit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="container-fluid">
        <div class="row">
            <div class="w-100" style="padding-top:15px;">
                <textarea class="form-control" placeholder="Enter Journal Reply Here..." style="height: 550px;"
                @bind=@Reply.Body></textarea>
            </div>
        </div>

        <div class="row" style="padding-top:15px;">
            <div class="col">
                <button class="btn btn-danger" @onclick=@OnDeleteButtonClicked @onclick:preventDefault>Delete</button>
            </div>
            <div class="col" style="text-align:right;">
                <button type="submit" class="btn btn-primary">Submit</button>
            </div>
        </div>
    </div>
</EditForm>
}
else
{
<span>@ErrorMessage</span>
}

@code
{
    [Parameter]
    public string ReplyId { get; set; }

    [Parameter]
    public string JournalId { get; set; }

    private Guid ReplyIdGuid { get; set; }
    private Guid JournalIdGuid { get; set; }
    private JournalEntry Journal { get; set; }
    private JournalReply Reply { get; set; }
    private string ErrorMessage { get; set; } = "Entry Id cannot be an empty Guid";
    private ClaimsPrincipal _user;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _user = authState.User;

        ReplyIdGuid = Guid.Parse(ReplyId);
        JournalIdGuid = Guid.Parse(JournalId);
        var api = new CouplesJournalDataApi(DbContext, _user);

        try
        {
            Journal = await api.GetJournalEntryAsync(JournalIdGuid);
            Reply = await api.GetJournalEntryReplyAsync(ReplyIdGuid);

            if (Journal == null)
            {
                ErrorMessage = "The journal does not exist!";
            }

            if (Reply == null)
            {
                ErrorMessage = "The journal reply does not exist!";
            }
        }
        catch (FormatException fe)
        {
            ErrorMessage = fe.Message;
        }
        catch (ArgumentException ae)
        {
            ErrorMessage = ae.Message;
        }
    }

    private async Task Submit()
    {
        var api = new CouplesJournalDataApi(DbContext, _user);
        await api.EditJournalEntryReplyAsync(ReplyIdGuid, Reply);

        NavigationManager.NavigateTo($"/ViewJournal/{JournalId}");
    }

    private async Task OnDeleteButtonClicked()
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            var api = new CouplesJournalDataApi(DbContext, _user);
            await api.DeleteJournalReplyAsync(ReplyIdGuid);
            NavigationManager.NavigateTo($"/ViewJournal/{JournalId}", true);
        }
    }
}