@using Microsoft.AspNetCore.Http
@using CouplesJournal.Data
@using CouplesJournal.Data.API
@using CouplesJournal.Data.Entities
@using CouplesJournal.Mail
@using Microsoft.AspNetCore.Identity
@using System.Timers

@inject CouplesJournalDbContext DbContext
@inject IHttpContextAccessor HttpAccessor
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject IMailService MailService
@inject UserManager<IdentityUser> UserManager

<EditForm Model=@Journal OnValidSubmit="@Submit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="container-fluid">
        <div class="row">
            <div class="w-100">
                <input class="form-control" type="text" placeholder="Enter Title Here..." @bind=@Journal.Title />
            </div>

            <div class="w-100 mh-100" style="padding-top:15px;">
                <textarea class="form-control" placeholder="Enter Journal Here..." style="height: 450px;"
                @bind=@Journal.Body></textarea>
            </div>

            <div class="w-100 mh-100" style="padding-top:15px; text-align:right;display:inline;">
                <div class="dropdown" style="display:inline;">
                    <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownJournalStatusButton"
                    data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        @Journal.Status.Value
                    </button>
                    <div class="dropdown-menu" aria-labelledby="dropdownJournalStatusButton">
                        @foreach (var status in Statuses)
                            {
                        <button class="dropdown-item" type="button"
                        @onclick="eventArgs => { OnMenuItemSelected(status); }">
                            @status.Value
                        </button>
                                    }
                    </div>
                </div>

                <button type="submit" class="btn btn-primary" style="display:inline;">Submit</button>
            </div>
        </div>
    </div>

</EditForm>

@code {
    private JournalEntry Journal = new JournalEntry();
    private List<JournalStatus> Statuses { get; set; }
    private Timer timer;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && Journal != null &&
            string.IsNullOrEmpty(Journal.Title) && string.IsNullOrEmpty(Journal.Body))
        {
            var journal = await LocalStorage.GetItemAsync<JournalEntry>("journal");
            if (journal != null)
            {
                Journal.Title = journal.Title;
                Journal.Body = journal.Body;
                this.StateHasChanged();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        using var api = new CouplesJournalDataApi(DbContext, HttpAccessor);

        Statuses = (await api.GetJournalStatusesAsync()).ToList();

        if (Statuses.Any())
        {
            Journal.Status = Statuses.FirstOrDefault(x => x.Value == "Draft");
        }

        timer = new Timer(5000);
        timer.Elapsed += new ElapsedEventHandler(SaveJournalToLocalStorage);
        timer.Enabled = true;
    }

    private async void SaveJournalToLocalStorage(object source, ElapsedEventArgs e)
    {
        if (!string.IsNullOrEmpty(Journal.Title) || !string.IsNullOrEmpty(Journal.Body))
        {
            await LocalStorage.SetItemAsync("journal", Journal);
        }
    }

    private async Task Submit()
    {
        timer.Enabled = false;

        using var api = new CouplesJournalDataApi(DbContext, HttpAccessor);
        await api.AddJournalEntryAsync(Journal);
        await LocalStorage.RemoveItemAsync("journal");

        if (Journal.Status.Value != "Draft")
        {
            foreach (var user in UserManager.Users.ToList())
            {
                if (user.UserName != HttpAccessor.HttpContext.User.Identity.Name)
                {
                    // https://localhost:5001/ViewJournal/2686a141-733c-42e3-b9d9-9e6a48b9c47f
                    var journalLink = $"{HttpAccessor.HttpContext.Request.Scheme}://{HttpAccessor.HttpContext.Request.Host}/ViewJournal/{Journal.Id}";

                    await MailService.SendEmailAsync(new Mail.MailRequest
                    {
                        To = user.Email,
                        Subject = $"{user.UserName} wrote a new journal entry",
                        Body = $"Hello,<br><br>{Journal.UserName} wrote a new journal entry titled '{Journal.Title}'.<br><br>You can view it here: {journalLink}"
                    });
                }
            }
        }

        NavigationManager.NavigateTo($"/ViewJournal/{Journal.Id}");
    }

    private void OnMenuItemSelected(JournalStatus status)
    {
        Journal.Status = status;
    }
}