@namespace CouplesJournal.Blazor.Components

@using CouplesJournal.Data.Entities
@using CouplesJournal.Blazor.Helper
@using Markdig
@using System.Linq
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="container-fluid">
    <div class="row">
        <div class="col mw-100">
            @foreach (var journal in Journals)
            {
                <div @key=@journal.Id class=@($"card content-margin {GetStyle(journal)}")>
                    <div class="card-body rounded content-border">
                        <h5 class="card-title">@journal.Title @(journal.Status.Value == "Draft" ? "[Draft]" : "")</h5>
                        <h6 class="card-subtitle mb-2 text-muted content-border-top">by @journal.UserName.Split("@")[0] on @journal.UpdatedOn.ToLongDateString() &#64; @journal.UpdatedOn.ToLongTimeString()</h6>
                        <p class="card-text" style="margin-top: 15px">
                            @(((MarkupString) Markdown.ToHtml($"{new String(journal.Body.Take(250).ToArray())}...")).Sanitize())
                        </p>
                        <a href=@($"/ViewJournal/{journal.Id}") class="card-link">Read More...</a>
                        @if (_user != null && journal.UserName == _user.Identity.Name)
                        {
                            <a href=@($"/EditJournal/{journal.Id}") class="card-link">Edit</a>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public List<JournalEntry> Journals { get; set; }

    private ClaimsPrincipal _user;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _user = authState.User;
    }

    private string GetStyle(JournalEntry journal)
    {
        if (journal.Status.Value == "Draft")
        {
            return "content-draft";
        }

        return string.Empty;
    }
}
