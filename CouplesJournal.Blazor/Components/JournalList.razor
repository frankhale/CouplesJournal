@namespace CouplesJournal.Blazor.Components

@using CouplesJournal.Data
@using CouplesJournal.Data.API
@using CouplesJournal.Data.Entities
@using CouplesJournal.Blazor.Helper
@using Markdig
@using System.Linq
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

@inject CouplesJournalDbContext DbContext
@inject AuthenticationStateProvider AuthenticationStateProvider

@foreach (var journal in Journals)
{
    <div @key=@journal.Id class=@($"card content-margin {GetStyle(journal)}")>
        <div class="card-body rounded content-border">
            <h5 class="card-title">@journal.Title @(journal.Status.Value == "Draft" ? "[Draft]" : "")</h5>
            <h6 class="card-subtitle mb-2 text-muted content-border-top">by @journal.UserName.Split("@")[0] on @journal.UpdatedOn.ToLongDateString() &#64; @journal.UpdatedOn.ToLongTimeString() has @journal.Replies.Count() replies</h6>
            <p class="card-text default-margin">
                @(((MarkupString) Markdown.ToHtml($"{new String(journal.Body.Take(250).ToArray())}...")).Sanitize())
            </p>
            <a href=@($"/ViewJournal/{journal.Id}") class="card-link">Read More...</a>
            @if (_user != null && journal.UserName == _user.Identity.Name)
            {
                <a href=@($"/EditJournal/{journal.Id}") class="card-link">Edit</a>
            }
        </div>
    </div>
}

@code {
    [Parameter]
    public List<JournalEntry> Journals { get; set; }

    private ClaimsPrincipal _user;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _user = authState.User;
    }

    private string GetStyle(JournalEntry journal)
    {
        if (journal.Status.Value == "Draft")
        {
            return "content-draft";
        }
        else
        {
            var api = new CouplesJournalDataApi(DbContext, _user);
            var result = api.GetViewTracking(journal.Id, _user.Identity.Name);

            if(!result) {
                return "content-unread";
            }
        }

        return string.Empty;
    }
}
